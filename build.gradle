// TODO
// -CREATE PLATFORM SPECIFIC TASKS FOR INSTALLING LIBUV
apply plugin: 'c'
apply plugin: 'cpp'


model {
    buildTypes {
        debug
        release
    }

    repositories {
        libs (PrebuiltLibraries) {
            uv {
                headers.srcDir './deps/libuv/include'
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file('./deps/libuv/.libs/libuv.a')
                }
            }
            gtest {
                headers.srcDir './deps/gtest/include'
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile  = file('./deps/gtest/build/libgtest.a')
                }
            }
        }
    }
}

def gtestFleauxBuild = new File('./deps/gtest/build')
def libuvFleauxBuild = new File('./deps/libuv/.libs')

binaries.all {
    lib library: 'uv', linkage: 'static'
    lib project: 'deps/libsdnbc', library: 'sdnbc', linkage: 'static'
    if (buildType == buildTypes.debug) {
        cCompiler.args '-g'
        cppCompiler.args '-g'
    }
}

libraries {
    fleaux {}
    sdnb_editor {
        binaries.all {
            lib project: 'deps/libsdnbc', library: 'sdnbc', linkage: 'static'
            lib library: 'uv', linkage: 'static'
            if (!libuvFleauxBuild.exists()) {
                tasks.withType(LinkSharedLibrary) {
                    dependsOn buildUVFleaux
                }
            }
        }
    }
}

executables {
    fleaux_test {
        binaries.all {
            lib library: 'gtest', linkage: 'static'
            lib libraries.fleaux.static
            lib libraries.sdnb_editor.static
            if (!gtestFleauxBuild.exists()) {
                tasks.withType(LinkExecutable) {
                    dependsOn buildGtestFleaux
                }
            }

            if (!libuvFleauxBuild.exists()) {
                tasks.withType(LinkExecutable) {
                    dependsOn buildUVFleaux
                }
            }
        }
    }
}

task buildUVFleaux (type: Exec) {
    workingDir '.'
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        //run batch file
    }
    else {
        commandLine './build_uv.sh'
    }
}

task buildGtestFleaux (type: Exec) {
    workingDir './deps/gtest'
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        // DO WINDOWS COMPILATION
    } else {
        commandLine './build.sh'
    }
}

task cleanProjDir (type: Exec) {
    workingDir '.'
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        // run windows command
    } else {
        commandLine 'find . -name "*.swp" | xargs rm -f'
    }
}

cleanProjDir

task runFleauxTests << {
    def testName = 'fleaux_test'
    def testDir = project.buildDir.getAbsolutePath() + '/binaries/fleaux_testExecutable/'
    def releaseTest = new File(testDir + 'release/' + testName)
    def debugTest = new File(testDir + 'debug/' + testName)
    if (releaseTest.exists()) {
        def proc = releaseTest.getAbsolutePath().execute()
        println "Running Release Build Tests...\n${proc.text}"
    } else if (debugTest.exists()) {
        def proc = debugTest.getAbsolutePath().execute()
        println "Running Debug Build Tests...\n${proc.text}"
    } else {
        println 'You need to build a test target first!\nRun "gradle tasks" and look for build tasks with "test" in the name\n'
    }
}

task wrapper (type: Wrapper) {
    gradleVersion = '2.2'
}
