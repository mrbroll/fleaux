apply plugin: 'c'
apply plugin: 'cpp'

/* dependencies */
buildscript {
    repositories { mavenCentral() }
    dependencies { classpath 'org.ajoberstar:gradle-git:0.12.0' }
}

import org.ajoberstar.grgit.*

def handleDep = { uri, depName, buildScript ->
    def tmpDir = new File(depName)
    tmpDir.mkdirs()
    Grgit.clone(dir: tmpDir, uri: uri)
    def proc = new File(buildScript).getAbsolutePath().execute()
    println "building ${depName}...\n${proc.text}"
}

task depLibsdnbc << {
    def libsdnbcScript = 'deps/libsdnbc/build.sh'
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        libsdnbcScript = 'deps/libsdnbc/build.bat'
    }
    handleDep('https://github.com/mrbroll/libsdnbc.git', 'libsdnbc', libsdnbcScript)
}

task depLibuv << {
    def libuvScript = 'deps/libuv/build.sh'
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        libuvScript = 'deps/libuv/build.bat'
    }
    handleDep('https://github.com/libuv/libuv.git', 'libuv', libuvScript)
}

task depGtest << {
    def gtestScript = 'deps/gtest/build.sh'
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        gtestScript = 'deps/gtest/build.bat'
    }
    handleDep('https://github.com/mrbroll/gtest-mirror.git', 'gtest', gtestScript)
}
/* end dependencies */

model {
    buildTypes {
        debug
        release
    }

    repositories {
        libs (PrebuiltLibraries) {
            sdnbc {
                headers.srcDir 'deps/libsdnbc/include'
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file('deps/libsdnbc/lib/libsdnbc.a')
                }
            }
            uv {
                headers.srcDir 'deps/libuv/include'
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file('deps/libuv/lib/libuv.a')
                }
            }
            gtest {
                headers.srcDir 'deps/gtest/include'
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile  = file('deps/gtest/lib/libgtest.a')
                }
            }
        }
    }
}

def libsdnbcBuild = new File('deps/libsdnbc/lib/libsdnbc.a')
def gtestBuild = new File('deps/gtest/lib/libgtest.a')
def libuvBuild = new File('deps/libuv/lib/libuv.a')

binaries.all {
    lib library: 'uv', linkage: 'static'
    lib library: 'sdnbc', linkage: 'static'
    if (buildType == buildTypes.debug) {
        cCompiler.args '-g'
        cppCompiler.args '-g'
    }
}

libraries {
    fleaux {}
    sdnb_editor {
        binaries.all {
            lib library: 'sdnbc', linkage: 'static'
            lib library: 'uv', linkage: 'static'
            if (!libuvBuild.exists()) {
                tasks.withType(CCompile) {
                    dependsOn depLibuv
                }
            }

            if (!libsdnbcBuild.exists()) {
                tasks.withType(CCompile) {
                    dependsOn depLibsdnbc
                }
            }
        }
    }
}

executables {
    test {
        binaries.all {
            lib library: 'gtest', linkage: 'static'
            lib libraries.fleaux.static
            lib libraries.sdnb_editor.static
            if (!gtestBuild.exists()) {
                tasks.withType(CppCompile) {
                    dependsOn depGtest
                }
            }

            if (!libuvBuild.exists()) {
                tasks.withType(CppCompile) {
                    dependsOn depLibuv
                }
            }
        }
    }
}

task test << {
    def testName = 'test'
    def testDir = project.buildDir.getAbsolutePath() + '/binaries/testExecutable/'
    def releaseTest = new File(testDir + 'release/' + testName)
    def debugTest = new File(testDir + 'debug/' + testName)
    if (releaseTest.exists()) {
        def proc = releaseTest.getAbsolutePath().execute()
        println "Running Release Build Tests...\n${proc.text}"
    } else if (debugTest.exists()) {
        def proc = debugTest.getAbsolutePath().execute()
        println "Running Debug Build Tests...\n${proc.text}"
    } else {
        println 'You need to build a test target first!\nRun "gradle tasks" and look for build tasks with "test" in the name\n'
    }
}

task wrapper (type: Wrapper) {
    gradleVersion = '2.2'
}
